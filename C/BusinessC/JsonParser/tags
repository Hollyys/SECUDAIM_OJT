!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
APPEND_INDENT	parson.c	1139;"	d	file:
APPEND_INDENT	parson.c	1358;"	d	file:
APPEND_STRING	parson.c	1129;"	d	file:
APPEND_STRING	parson.c	1357;"	d	file:
CC	makefile	/^CC = gcc$/;"	m
CFLAGS	makefile	/^CFLAGS = -Wall -g$/;"	m
IS_CONT	parson.c	104;"	d	file:
IS_NUMBER_INVALID	parson.c	88;"	d	file:
IS_NUMBER_INVALID	parson.c	90;"	d	file:
JSONArray	parson.h	/^    JSONArray   = 5,$/;"	e	enum:json_value_type
JSONBoolean	parson.h	/^    JSONBoolean = 6$/;"	e	enum:json_value_type
JSONError	parson.h	/^    JSONError   = -1,$/;"	e	enum:json_value_type
JSONFailure	parson.h	/^    JSONFailure = -1$/;"	e	enum:json_result_t
JSONNull	parson.h	/^    JSONNull    = 1,$/;"	e	enum:json_value_type
JSONNumber	parson.h	/^    JSONNumber  = 3,$/;"	e	enum:json_value_type
JSONObject	parson.h	/^    JSONObject  = 4,$/;"	e	enum:json_value_type
JSONString	parson.h	/^    JSONString  = 2,$/;"	e	enum:json_value_type
JSONSuccess	parson.h	/^    JSONSuccess = 0,$/;"	e	enum:json_result_t
JSON_Array	parson.h	/^typedef struct json_array_t  JSON_Array;$/;"	t	typeref:struct:json_array_t
JSON_Free_Function	parson.h	/^typedef void   (*JSON_Free_Function)(void *);$/;"	t
JSON_Malloc_Function	parson.h	/^typedef void * (*JSON_Malloc_Function)(size_t);$/;"	t
JSON_Number_Serialization_Function	parson.h	/^typedef int (*JSON_Number_Serialization_Function)(double num, char *buf);$/;"	t
JSON_Object	parson.h	/^typedef struct json_object_t JSON_Object;$/;"	t	typeref:struct:json_object_t
JSON_Status	parson.h	/^typedef int JSON_Status;$/;"	t
JSON_String	parson.c	/^} JSON_String;$/;"	t	typeref:struct:json_string	file:
JSON_Value	parson.h	/^typedef struct json_value_t  JSON_Value;$/;"	t	typeref:struct:json_value_t
JSON_Value_Type	parson.h	/^typedef int JSON_Value_Type;$/;"	t
JSON_Value_Value	parson.c	/^} JSON_Value_Value;$/;"	t	typeref:union:json_value_value	file:
LIBS	makefile	/^LIBS = -lpthread$/;"	m
MAX	parson.c	82;"	d	file:
MAX_NESTING	parson.c	65;"	d	file:
MAX_THREADS	legacy/jsonParser.c	9;"	d	file:
MAX_THREADS	threads.h	7;"	d
OBJECT_INVALID_IX	parson.c	93;"	d	file:
OBJS	makefile	/^OBJS = $(SRCS:.c=.o)$/;"	m
PARSON_DEFAULT_FLOAT_FORMAT	parson.c	68;"	d	file:
PARSON_FALSE	parson.c	109;"	d	file:
PARSON_IMPL_VERSION_MAJOR	parson.c	33;"	d	file:
PARSON_IMPL_VERSION_MINOR	parson.c	34;"	d	file:
PARSON_IMPL_VERSION_PATCH	parson.c	35;"	d	file:
PARSON_INDENT_STR	parson.c	76;"	d	file:
PARSON_NUM_BUF_SIZE	parson.c	72;"	d	file:
PARSON_TRUE	parson.c	108;"	d	file:
PARSON_VERSION_MAJOR	parson.h	37;"	d
PARSON_VERSION_MINOR	parson.h	38;"	d
PARSON_VERSION_PATCH	parson.h	39;"	d
PARSON_VERSION_STRING	parson.h	41;"	d
SIZEOF_TOKEN	parson.c	79;"	d	file:
SKIP_CHAR	parson.c	80;"	d	file:
SKIP_WHITESPACES	parson.c	81;"	d	file:
SRCS	makefile	/^SRCS = main.c threads.c parson.c$/;"	m
STARTING_CAPACITY	parson.c	64;"	d	file:
STRINGLENTH	legacy/jsonParser.c	10;"	d	file:
STRINGLENTH	threads.h	8;"	d
Setting	legacy/jsonParser.c	/^struct Setting$/;"	s	file:
Setting	threads.h	/^struct Setting {$/;"	s
TARGET	makefile	/^TARGET = parser$/;"	m
THREADS_H	threads.h	3;"	d
Thread	legacy/jsonParser.c	/^struct Thread$/;"	s	file:
Thread	threads.h	/^struct Thread {$/;"	s
ThreadArgs	legacy/jsonParser.c	/^struct ThreadArgs$/;"	s	file:
ThreadArgs	threads.h	/^struct ThreadArgs {$/;"	s
_CRT_SECURE_NO_WARNINGS	parson.c	27;"	d	file:
array	parson.c	/^    JSON_Array  *array;$/;"	m	union:json_value_value	file:
boolean	parson.c	/^    int          boolean;$/;"	m	union:json_value_value	file:
capacity	parson.c	/^    size_t       capacity;$/;"	m	struct:json_array_t	file:
cell_capacity	parson.c	/^    size_t         cell_capacity;$/;"	m	struct:json_object_t	file:
cell_ixs	parson.c	/^    size_t        *cell_ixs;$/;"	m	struct:json_object_t	file:
cells	parson.c	/^    size_t        *cells;$/;"	m	struct:json_object_t	file:
chars	parson.c	/^    char *chars;$/;"	m	struct:json_string	file:
count	parson.c	/^    size_t         count;$/;"	m	struct:json_object_t	file:
count	parson.c	/^    size_t       count;$/;"	m	struct:json_array_t	file:
free	parson.c	85;"	d	file:
function	legacy/jsonParser.c	/^void *function(void *arg)$/;"	f
function	threads.c	/^void *function(void *arg)$/;"	f
get_quoted_string	parson.c	/^static char * get_quoted_string(const char **string, size_t *output_string_len) {$/;"	f	file:
globalRootObject	threads.c	/^JSON_Object *globalRootObject = NULL;$/;"	v
globalRootValue	threads.c	/^JSON_Value *globalRootValue = NULL;$/;"	v
hash_string	parson.c	/^static unsigned long hash_string(const char *string, size_t n) {$/;"	f	file:
hashes	parson.c	/^    unsigned long *hashes;$/;"	m	struct:json_object_t	file:
hex_char_to_int	parson.c	/^static int hex_char_to_int(char c) {$/;"	f	file:
id	legacy/jsonParser.c	/^    int id;$/;"	m	struct:ThreadArgs	file:
id	threads.h	/^    int id;$/;"	m	struct:ThreadArgs
is_decimal	parson.c	/^static parson_bool_t is_decimal(const char *string, size_t length) {$/;"	f	file:
is_valid_utf8	parson.c	/^static int is_valid_utf8(const char *string, size_t string_len) {$/;"	f	file:
item_capacity	parson.c	/^    size_t         item_capacity;$/;"	m	struct:json_object_t	file:
items	parson.c	/^    JSON_Value **items;$/;"	m	struct:json_array_t	file:
jsonInput	legacy/jsonParser.c	/^    struct Setting *jsonInput; \/\/ 포인터로 수정$/;"	m	struct:ThreadArgs	typeref:struct:ThreadArgs::Setting	file:
jsonInput	threads.h	/^    struct Setting *jsonInput;$/;"	m	struct:ThreadArgs	typeref:struct:ThreadArgs::Setting
json_array	parson.c	/^JSON_Array * json_array(const JSON_Value *value) {$/;"	f
json_array_add	parson.c	/^static JSON_Status json_array_add(JSON_Array *array, JSON_Value *value) {$/;"	f	file:
json_array_append_boolean	parson.c	/^JSON_Status json_array_append_boolean(JSON_Array *array, int boolean) {$/;"	f
json_array_append_null	parson.c	/^JSON_Status json_array_append_null(JSON_Array *array) {$/;"	f
json_array_append_number	parson.c	/^JSON_Status json_array_append_number(JSON_Array *array, double number) {$/;"	f
json_array_append_string	parson.c	/^JSON_Status json_array_append_string(JSON_Array *array, const char *string) {$/;"	f
json_array_append_string_with_len	parson.c	/^JSON_Status json_array_append_string_with_len(JSON_Array *array, const char *string, size_t len) {$/;"	f
json_array_append_value	parson.c	/^JSON_Status json_array_append_value(JSON_Array *array, JSON_Value *value) {$/;"	f
json_array_clear	parson.c	/^JSON_Status json_array_clear(JSON_Array *array) {$/;"	f
json_array_free	parson.c	/^static void json_array_free(JSON_Array *array) {$/;"	f	file:
json_array_get_array	parson.c	/^JSON_Array * json_array_get_array(const JSON_Array *array, size_t index) {$/;"	f
json_array_get_boolean	parson.c	/^int json_array_get_boolean(const JSON_Array *array, size_t index) {$/;"	f
json_array_get_count	parson.c	/^size_t json_array_get_count(const JSON_Array *array) {$/;"	f
json_array_get_number	parson.c	/^double json_array_get_number(const JSON_Array *array, size_t index) {$/;"	f
json_array_get_object	parson.c	/^JSON_Object * json_array_get_object(const JSON_Array *array, size_t index) {$/;"	f
json_array_get_string	parson.c	/^const char * json_array_get_string(const JSON_Array *array, size_t index) {$/;"	f
json_array_get_string_len	parson.c	/^size_t json_array_get_string_len(const JSON_Array *array, size_t index) {$/;"	f
json_array_get_value	parson.c	/^JSON_Value * json_array_get_value(const JSON_Array *array, size_t index) {$/;"	f
json_array_get_wrapping_value	parson.c	/^JSON_Value * json_array_get_wrapping_value(const JSON_Array *array) {$/;"	f
json_array_make	parson.c	/^static JSON_Array * json_array_make(JSON_Value *wrapping_value) {$/;"	f	file:
json_array_remove	parson.c	/^JSON_Status json_array_remove(JSON_Array *array, size_t ix) {$/;"	f
json_array_replace_boolean	parson.c	/^JSON_Status json_array_replace_boolean(JSON_Array *array, size_t i, int boolean) {$/;"	f
json_array_replace_null	parson.c	/^JSON_Status json_array_replace_null(JSON_Array *array, size_t i) {$/;"	f
json_array_replace_number	parson.c	/^JSON_Status json_array_replace_number(JSON_Array *array, size_t i, double number) {$/;"	f
json_array_replace_string	parson.c	/^JSON_Status json_array_replace_string(JSON_Array *array, size_t i, const char* string) {$/;"	f
json_array_replace_string_with_len	parson.c	/^JSON_Status json_array_replace_string_with_len(JSON_Array *array, size_t i, const char *string, size_t len) {$/;"	f
json_array_replace_value	parson.c	/^JSON_Status json_array_replace_value(JSON_Array *array, size_t ix, JSON_Value *value) {$/;"	f
json_array_resize	parson.c	/^static JSON_Status json_array_resize(JSON_Array *array, size_t new_capacity) {$/;"	f	file:
json_array_t	parson.c	/^struct json_array_t {$/;"	s	file:
json_boolean	parson.c	/^int json_boolean(const JSON_Value *value) {$/;"	f
json_free_serialized_string	parson.c	/^void json_free_serialized_string(char *string) {$/;"	f
json_number	parson.c	/^double json_number(const JSON_Value *value) {$/;"	f
json_object	parson.c	/^JSON_Object * json_object (const JSON_Value *value) {$/;"	f
json_object_add	parson.c	/^static JSON_Status json_object_add(JSON_Object *object, char *name, JSON_Value *value) {$/;"	f	file:
json_object_clear	parson.c	/^JSON_Status json_object_clear(JSON_Object *object) {$/;"	f
json_object_deinit	parson.c	/^static void json_object_deinit(JSON_Object *object, parson_bool_t free_keys, parson_bool_t free_values) {$/;"	f	file:
json_object_dotget_array	parson.c	/^JSON_Array * json_object_dotget_array(const JSON_Object *object, const char *name) {$/;"	f
json_object_dotget_boolean	parson.c	/^int json_object_dotget_boolean(const JSON_Object *object, const char *name) {$/;"	f
json_object_dotget_number	parson.c	/^double json_object_dotget_number(const JSON_Object *object, const char *name) {$/;"	f
json_object_dotget_object	parson.c	/^JSON_Object * json_object_dotget_object(const JSON_Object *object, const char *name) {$/;"	f
json_object_dotget_string	parson.c	/^const char * json_object_dotget_string(const JSON_Object *object, const char *name) {$/;"	f
json_object_dotget_string_len	parson.c	/^size_t json_object_dotget_string_len(const JSON_Object *object, const char *name) {$/;"	f
json_object_dotget_value	parson.c	/^JSON_Value * json_object_dotget_value(const JSON_Object *object, const char *name) {$/;"	f
json_object_dothas_value	parson.c	/^int json_object_dothas_value (const JSON_Object *object, const char *name) {$/;"	f
json_object_dothas_value_of_type	parson.c	/^int json_object_dothas_value_of_type(const JSON_Object *object, const char *name, JSON_Value_Type type) {$/;"	f
json_object_dotremove	parson.c	/^JSON_Status json_object_dotremove(JSON_Object *object, const char *name) {$/;"	f
json_object_dotremove_internal	parson.c	/^static JSON_Status json_object_dotremove_internal(JSON_Object *object, const char *name, parson_bool_t free_value) {$/;"	f	file:
json_object_dotset_boolean	parson.c	/^JSON_Status json_object_dotset_boolean(JSON_Object *object, const char *name, int boolean) {$/;"	f
json_object_dotset_null	parson.c	/^JSON_Status json_object_dotset_null(JSON_Object *object, const char *name) {$/;"	f
json_object_dotset_number	parson.c	/^JSON_Status json_object_dotset_number(JSON_Object *object, const char *name, double number) {$/;"	f
json_object_dotset_string	parson.c	/^JSON_Status json_object_dotset_string(JSON_Object *object, const char *name, const char *string) {$/;"	f
json_object_dotset_string_with_len	parson.c	/^JSON_Status json_object_dotset_string_with_len(JSON_Object *object, const char *name, const char *string, size_t len) {$/;"	f
json_object_dotset_value	parson.c	/^JSON_Status json_object_dotset_value(JSON_Object *object, const char *name, JSON_Value *value) {$/;"	f
json_object_free	parson.c	/^static void json_object_free(JSON_Object *object) {$/;"	f	file:
json_object_get_array	parson.c	/^JSON_Array * json_object_get_array(const JSON_Object *object, const char *name) {$/;"	f
json_object_get_boolean	parson.c	/^int json_object_get_boolean(const JSON_Object *object, const char *name) {$/;"	f
json_object_get_cell_ix	parson.c	/^static size_t json_object_get_cell_ix(const JSON_Object *object, const char *key, size_t key_len, unsigned long hash, parson_bool_t *out_found) {$/;"	f	file:
json_object_get_count	parson.c	/^size_t json_object_get_count(const JSON_Object *object) {$/;"	f
json_object_get_name	parson.c	/^const char * json_object_get_name(const JSON_Object *object, size_t index) {$/;"	f
json_object_get_number	parson.c	/^double json_object_get_number(const JSON_Object *object, const char *name) {$/;"	f
json_object_get_object	parson.c	/^JSON_Object * json_object_get_object(const JSON_Object *object, const char *name) {$/;"	f
json_object_get_string	parson.c	/^const char * json_object_get_string(const JSON_Object *object, const char *name) {$/;"	f
json_object_get_string_len	parson.c	/^size_t json_object_get_string_len(const JSON_Object *object, const char *name) {$/;"	f
json_object_get_value	parson.c	/^JSON_Value * json_object_get_value(const JSON_Object *object, const char *name) {$/;"	f
json_object_get_value_at	parson.c	/^JSON_Value * json_object_get_value_at(const JSON_Object *object, size_t index) {$/;"	f
json_object_get_wrapping_value	parson.c	/^JSON_Value *json_object_get_wrapping_value(const JSON_Object *object) {$/;"	f
json_object_getn_value	parson.c	/^static JSON_Value * json_object_getn_value(const JSON_Object *object, const char *name, size_t name_len) {$/;"	f	file:
json_object_grow_and_rehash	parson.c	/^static JSON_Status json_object_grow_and_rehash(JSON_Object *object) {$/;"	f	file:
json_object_has_value	parson.c	/^int json_object_has_value (const JSON_Object *object, const char *name) {$/;"	f
json_object_has_value_of_type	parson.c	/^int json_object_has_value_of_type(const JSON_Object *object, const char *name, JSON_Value_Type type) {$/;"	f
json_object_init	parson.c	/^static JSON_Status json_object_init(JSON_Object *object, size_t capacity) {$/;"	f	file:
json_object_make	parson.c	/^static JSON_Object * json_object_make(JSON_Value *wrapping_value) {$/;"	f	file:
json_object_remove	parson.c	/^JSON_Status json_object_remove(JSON_Object *object, const char *name) {$/;"	f
json_object_remove_internal	parson.c	/^static JSON_Status json_object_remove_internal(JSON_Object *object, const char *name, parson_bool_t free_value) {$/;"	f	file:
json_object_set_boolean	parson.c	/^JSON_Status json_object_set_boolean(JSON_Object *object, const char *name, int boolean) {$/;"	f
json_object_set_null	parson.c	/^JSON_Status json_object_set_null(JSON_Object *object, const char *name) {$/;"	f
json_object_set_number	parson.c	/^JSON_Status json_object_set_number(JSON_Object *object, const char *name, double number) {$/;"	f
json_object_set_string	parson.c	/^JSON_Status json_object_set_string(JSON_Object *object, const char *name, const char *string) {$/;"	f
json_object_set_string_with_len	parson.c	/^JSON_Status json_object_set_string_with_len(JSON_Object *object, const char *name, const char *string, size_t len) {$/;"	f
json_object_set_value	parson.c	/^JSON_Status json_object_set_value(JSON_Object *object, const char *name, JSON_Value *value) {$/;"	f
json_object_t	parson.c	/^struct json_object_t {$/;"	s	file:
json_parse_file	parson.c	/^JSON_Value * json_parse_file(const char *filename) {$/;"	f
json_parse_file_with_comments	parson.c	/^JSON_Value * json_parse_file_with_comments(const char *filename) {$/;"	f
json_parse_string	parson.c	/^JSON_Value * json_parse_string(const char *string) {$/;"	f
json_parse_string_with_comments	parson.c	/^JSON_Value * json_parse_string_with_comments(const char *string) {$/;"	f
json_result_t	parson.h	/^enum json_result_t {$/;"	g
json_serialization_size	parson.c	/^size_t json_serialization_size(const JSON_Value *value) {$/;"	f
json_serialization_size_pretty	parson.c	/^size_t json_serialization_size_pretty(const JSON_Value *value) {$/;"	f
json_serialize_string	parson.c	/^static int json_serialize_string(const char *string, size_t len, char *buf) {$/;"	f	file:
json_serialize_to_buffer	parson.c	/^JSON_Status json_serialize_to_buffer(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {$/;"	f
json_serialize_to_buffer_pretty	parson.c	/^JSON_Status json_serialize_to_buffer_pretty(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {$/;"	f
json_serialize_to_buffer_r	parson.c	/^static int json_serialize_to_buffer_r(const JSON_Value *value, char *buf, int level, parson_bool_t is_pretty, char *num_buf)$/;"	f	file:
json_serialize_to_file	parson.c	/^JSON_Status json_serialize_to_file(const JSON_Value *value, const char *filename) {$/;"	f
json_serialize_to_file_pretty	parson.c	/^JSON_Status json_serialize_to_file_pretty(const JSON_Value *value, const char *filename) {$/;"	f
json_serialize_to_string	parson.c	/^char * json_serialize_to_string(const JSON_Value *value) {$/;"	f
json_serialize_to_string_pretty	parson.c	/^char * json_serialize_to_string_pretty(const JSON_Value *value) {$/;"	f
json_set_allocation_functions	parson.c	/^void json_set_allocation_functions(JSON_Malloc_Function malloc_fun, JSON_Free_Function free_fun) {$/;"	f
json_set_escape_slashes	parson.c	/^void json_set_escape_slashes(int escape_slashes) {$/;"	f
json_set_float_serialization_format	parson.c	/^void json_set_float_serialization_format(const char *format) {$/;"	f
json_set_number_serialization_function	parson.c	/^void json_set_number_serialization_function(JSON_Number_Serialization_Function func) {$/;"	f
json_string	parson.c	/^const char * json_string(const JSON_Value *value) {$/;"	f
json_string	parson.c	/^typedef struct json_string {$/;"	s	file:
json_string_len	parson.c	/^size_t json_string_len(const JSON_Value *value) {$/;"	f
json_type	parson.c	/^JSON_Value_Type json_type(const JSON_Value *value) {$/;"	f
json_validate	parson.c	/^JSON_Status json_validate(const JSON_Value *schema, const JSON_Value *value) {$/;"	f
json_value_deep_copy	parson.c	/^JSON_Value * json_value_deep_copy(const JSON_Value *value) {$/;"	f
json_value_equals	parson.c	/^int json_value_equals(const JSON_Value *a, const JSON_Value *b) {$/;"	f
json_value_free	parson.c	/^void json_value_free(JSON_Value *value) {$/;"	f
json_value_get_array	parson.c	/^JSON_Array * json_value_get_array(const JSON_Value *value) {$/;"	f
json_value_get_boolean	parson.c	/^int json_value_get_boolean(const JSON_Value *value) {$/;"	f
json_value_get_number	parson.c	/^double json_value_get_number(const JSON_Value *value) {$/;"	f
json_value_get_object	parson.c	/^JSON_Object * json_value_get_object(const JSON_Value *value) {$/;"	f
json_value_get_parent	parson.c	/^JSON_Value * json_value_get_parent (const JSON_Value *value) {$/;"	f
json_value_get_string	parson.c	/^const char * json_value_get_string(const JSON_Value *value) {$/;"	f
json_value_get_string_desc	parson.c	/^static const JSON_String * json_value_get_string_desc(const JSON_Value *value) {$/;"	f	file:
json_value_get_string_len	parson.c	/^size_t json_value_get_string_len(const JSON_Value *value) {$/;"	f
json_value_get_type	parson.c	/^JSON_Value_Type json_value_get_type(const JSON_Value *value) {$/;"	f
json_value_init_array	parson.c	/^JSON_Value * json_value_init_array(void) {$/;"	f
json_value_init_boolean	parson.c	/^JSON_Value * json_value_init_boolean(int boolean) {$/;"	f
json_value_init_null	parson.c	/^JSON_Value * json_value_init_null(void) {$/;"	f
json_value_init_number	parson.c	/^JSON_Value * json_value_init_number(double number) {$/;"	f
json_value_init_object	parson.c	/^JSON_Value * json_value_init_object(void) {$/;"	f
json_value_init_string	parson.c	/^JSON_Value * json_value_init_string(const char *string) {$/;"	f
json_value_init_string_no_copy	parson.c	/^static JSON_Value * json_value_init_string_no_copy(char *string, size_t length) {$/;"	f	file:
json_value_init_string_with_len	parson.c	/^JSON_Value * json_value_init_string_with_len(const char *string, size_t length) {$/;"	f
json_value_t	parson.c	/^struct json_value_t {$/;"	s	file:
json_value_type	parson.h	/^enum json_value_type {$/;"	g
json_value_value	parson.c	/^typedef union json_value_value {$/;"	u	file:
length	parson.c	/^    size_t length;$/;"	m	struct:json_string	file:
load_settings	threads.c	/^void load_settings(struct Setting *setting, const char *filename)$/;"	f
main	legacy/jsonParser.c	/^int main()$/;"	f
main	main.c	/^int main() {$/;"	f
malloc	parson.c	84;"	d	file:
name	legacy/jsonParser.c	/^    char name[20];$/;"	m	struct:Thread	file:
name	threads.h	/^    char name[20];$/;"	m	struct:Thread
names	parson.c	/^    char         **names;$/;"	m	struct:json_object_t	file:
null	parson.c	/^    int          null;$/;"	m	union:json_value_value	file:
num_bytes_in_utf8_sequence	parson.c	/^static int num_bytes_in_utf8_sequence(unsigned char c) {$/;"	f	file:
number	parson.c	/^    double       number;$/;"	m	union:json_value_value	file:
object	parson.c	/^    JSON_Object *object;$/;"	m	union:json_value_value	file:
parent	parson.c	/^    JSON_Value      *parent;$/;"	m	struct:json_value_t	file:
parse_array_value	parson.c	/^static JSON_Value * parse_array_value(const char **string, size_t nesting) {$/;"	f	file:
parse_boolean_value	parson.c	/^static JSON_Value * parse_boolean_value(const char **string) {$/;"	f	file:
parse_null_value	parson.c	/^static JSON_Value * parse_null_value(const char **string) {$/;"	f	file:
parse_number_value	parson.c	/^static JSON_Value * parse_number_value(const char **string) {$/;"	f	file:
parse_object_value	parson.c	/^static JSON_Value * parse_object_value(const char **string, size_t nesting) {$/;"	f	file:
parse_string_value	parson.c	/^static JSON_Value * parse_string_value(const char **string) {$/;"	f	file:
parse_utf16	parson.c	/^static JSON_Status parse_utf16(const char **unprocessed, char **processed) {$/;"	f	file:
parse_utf16_hex	parson.c	/^static JSON_Status parse_utf16_hex(const char *s, unsigned int *result) {$/;"	f	file:
parse_value	parson.c	/^static JSON_Value * parse_value(const char **string, size_t nesting) {$/;"	f	file:
parson_bool_t	parson.c	/^typedef int parson_bool_t;$/;"	t	file:
parson_escape_slashes	parson.c	/^static int parson_escape_slashes = 1;$/;"	v	file:
parson_float_format	parson.c	/^static char *parson_float_format = NULL;$/;"	v	file:
parson_free	parson.c	/^static JSON_Free_Function parson_free = free;$/;"	v	file:
parson_malloc	parson.c	/^static JSON_Malloc_Function parson_malloc = malloc;$/;"	v	file:
parson_number_serialization_function	parson.c	/^static JSON_Number_Serialization_Function parson_number_serialization_function = NULL;$/;"	v	file:
parson_parson_h	parson.h	27;"	d
parson_sprintf	parson.c	/^static int parson_sprintf(char * s, const char * format, ...) {$/;"	f	file:
parson_strdup	parson.c	/^static char * parson_strdup(const char *string) {$/;"	f	file:
parson_strndup	parson.c	/^static char * parson_strndup(const char *string, size_t n) {$/;"	f	file:
process_string	parson.c	/^static char* process_string(const char *input, size_t input_len, size_t *output_len) {$/;"	f	file:
read_file	parson.c	/^static char * read_file(const char * filename) {$/;"	f	file:
remove_comments	parson.c	/^static void remove_comments(char *string, const char *start_token, const char *end_token) {$/;"	f	file:
repeat	legacy/jsonParser.c	/^    int repeat;$/;"	m	struct:Setting	file:
repeat	threads.h	/^    int repeat;$/;"	m	struct:Setting
signal_handler	threads.c	/^void signal_handler(int sig)$/;"	f
skip_quotes	parson.c	/^static JSON_Status skip_quotes(const char **string) {$/;"	f	file:
sscanf	parson.c	54;"	d	file:
sscanf	parson.c	55;"	d	file:
strcpy	parson.c	60;"	d	file:
strcpy	parson.c	62;"	d	file:
string	parson.c	/^    JSON_String  string;$/;"	m	union:json_value_value	file:
stringGenerator	legacy/jsonParser.c	/^char *stringGenerator()$/;"	f
stringGenerator	threads.c	/^char *stringGenerator()$/;"	f
thread	legacy/jsonParser.c	/^    struct Thread thread[MAX_THREADS];$/;"	m	struct:Setting	typeref:struct:Setting::Thread	file:
thread	threads.h	/^    struct Thread thread[MAX_THREADS];$/;"	m	struct:Setting	typeref:struct:Setting::Thread
thread_num	legacy/jsonParser.c	/^    int thread_num;$/;"	m	struct:Setting	file:
thread_num	threads.h	/^    int thread_num;$/;"	m	struct:Setting
type	parson.c	/^    JSON_Value_Type  type;$/;"	m	struct:json_value_t	file:
value	parson.c	/^    JSON_Value_Value value;$/;"	m	struct:json_value_t	file:
values	parson.c	/^    JSON_Value   **values;$/;"	m	struct:json_object_t	file:
verify_utf8_sequence	parson.c	/^static JSON_Status verify_utf8_sequence(const unsigned char *string, int *len) {$/;"	f	file:
wrapping_value	parson.c	/^    JSON_Value    *wrapping_value;$/;"	m	struct:json_object_t	file:
wrapping_value	parson.c	/^    JSON_Value  *wrapping_value;$/;"	m	struct:json_array_t	file:
